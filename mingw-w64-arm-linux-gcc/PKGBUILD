# Maintainer: Tim S <stahta01@gmail.com>

_basename=gcc
_build_boot_gcc=yes
_realname_prefix=arm-linux-
_realname=${_realname_prefix}${_basename}
_filename=${_basename}
_foldername=${_basename}
_target=arm-linux-gnueabi

pkgbase=mingw-w64-${_realname}
if [[ "${_build_boot_gcc}" == "yes" ]]; then
  pkgname="${MINGW_PACKAGE_PREFIX}-boot-${_realname}"
  pkgdesc="The GNU bootstrap C compiler for the ARM microprocessors (mingw-w64)"
else
  pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
  pkgdesc="The GNU C++ compiler for the ARM microprocessors (mingw-w64)"
fi
pkgver=4.6.3
pkgrel=1
arch=('any')
url="https://github.com/stahta01/gcc4"
license=('GPL3')
groups=("${MINGW_PACKAGE_PREFIX}-${_target}-toolchain")
conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname_prefix}${_basename})
provides=(${MINGW_PACKAGE_PREFIX}-${_realname_prefix}${_basename})
depends=(${MINGW_PACKAGE_PREFIX}-mpc)
makedepends=(${MINGW_PACKAGE_PREFIX}-gettext
  'bison' 'diffutils' 'gettext' 'gettext-devel'
  'intltool' 'make' 'patch' 'perl' 'tar' 'texinfo')
noextract=(${_filename}-${pkgver}.tar.bz2)
source=("https://ftp.gnu.org/gnu/gcc/gcc-${pkgver}/${_filename}-${pkgver}.tar.bz2"
        003-gcc-4.5-add-GNUC_STDC_INLINE.patch
        006-gcc-4.5-PR_54300_rtl-optimization.patch
        011-gcc-4.3-suppress-makeinfo-warning.patch
        015-gcc-4.3-add-force-to-makeinfo.patch
        016-gcc-4.6-Fix-texi-docs-syntax-errors.patch)
sha256sums=('e8f5853d4eec2f5ebaf8a72ae4d53c436aacf98153b2499f8635b48c4718a093'
            '8222c61a049e1a09af1f53fb3d6a6146d0b850d3a033dace0d9d93570e03e580'
            '30b1ce83f5444f2c8314e40f8e346581b2f2cec007f3eb33cb894a2930dc4265'
            'dd174b790a13d43e527a3d5807cf415407bd0c67532495da139afd14a6265462'
            'd02434150e94b970603607e751718a96cbcbc7c080ddbd9517069968f0660ad4'
            '3183d14c89aaafc1d5c4bc2d9c09812bc229e82cb91d9e1e7c3b9b5da25eb42a')
prepare() {
  tar -xjf ${_filename}-${pkgver}.tar.bz2 -C ${srcdir}  --checkpoint=100 \
    --exclude=${_foldername}-${pkgver}/{INSTALL,libjava,libgo,libgfortran} \
    --exclude=${_foldername}-${pkgver}/gcc/{ada,fortran,java,po}

  cd ${_foldername}-${pkgver}

  patch --forward -p1 -i "$srcdir"/003-gcc-4.5-add-GNUC_STDC_INLINE.patch

  # Backported Pull Requests or other changes from other branches
  patch --forward -p1 -i "$srcdir"/006-gcc-4.5-PR_54300_rtl-optimization.patch

  # Warning reduction changes
  patch --forward -p1 -i "$srcdir"/011-gcc-4.3-suppress-makeinfo-warning.patch

  # Build code fix for documentation
  patch --forward -p1 -i "$srcdir"/015-gcc-4.3-add-force-to-makeinfo.patch
  # Sourcecode fix for documentation
  patch --forward -p1 -i "$srcdir"/016-gcc-4.6-Fix-texi-docs-syntax-errors.patch
}

build() {
  if [[ -d "build-gcc-${CARCH}" ]]; then
    rm -rf build-gcc-${CARCH}
  fi
  mkdir build-gcc-${CARCH}
  cd build-gcc-${CARCH}

  local -a _gcc_pass_cfg_options
  if [[ "${_build_boot_gcc}" == "yes" ]]; then
    _gcc_pass_cfg_options+=("--without-headers")
    _gcc_pass_cfg_options+=("--enable-languages=c")
  else
    _gcc_pass_cfg_options+=("--enable-languages=c,c++")
    _gcc_pass_cfg_options+=("--with-sysroot=${MINGW_PREFIX}/${_target}")
  fi

  CPPFLAGS=""
#  CXXFLAGS="-O2 -Wno-error=format-security"
#  CFLAGS="-O2 -Wno-error=format-security"
  CXXFLAGS="-g -Wno-error=format-security"
  CFLAGS="-g -Wno-error=format-security"
  ../${_filename}-$pkgver/configure \
    "${_gcc_pass_cfg_options[@]}" \
    --prefix=${MINGW_PREFIX} \
    --with-native-system-header-dir=/usr/$_target \
    --libexecdir=${MINGW_PREFIX}/lib \
    --infodir=${MINGW_PREFIX}/share/info \
    --mandir=${MINGW_PREFIX}/share/man \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --with-pkgversion="${_realname}" \
    --with-bugurl="${url}/issues" \
    --target=${_target} \
    --program-prefix="${_target}-" \
    --disable-multilib \
    --disable-werror \
    --disable-nsl \
    --disable-shared \
    --disable-decimal-float \
    --disable-lto \
    --disable-threads \
    --disable-tls \
    --disable-libada \
    --disable-libffi \
    --disable-libgomp \
    --disable-libmudflap \
    --disable-libquadmath \
    --disable-libsanitizer \
    --disable-libssp \
    --disable-libstdcxx-pch \
    --with-as=${MINGW_PREFIX}/bin/${_target}-as \
    --with-ld=${MINGW_PREFIX}/bin/${_target}-ld \
    --with-ar=${MINGW_PREFIX}/bin/${_target}-ar

    #--with-arch=armv6 --with-fpu=vfp --with-float=hard \
    #--disable-sjlj-exceptions --enable-checking=release \
    #--enable-linker-build-id --enable-gnu-unique-object \
    #--disable-nls  \
    #--without-ppl --without-cloog

  make -j1 all-gcc
}

#check() {
#  cd "${_foldername}-$pkgver/build-gcc-${CARCH}"
#  make -k check-gcc
#}

package() {
  CPPFLAGS=""
#  CFLAGS="-O2"
  CFLAGS="-g"
  cd "build-gcc-${CARCH}"
  make -j1 DESTDIR="$pkgdir/" install-gcc

  # Remove files that conflict with host gcc package
  rm -fr "$pkgdir${MINGW_PREFIX}/share/man"
  rm -fr "$pkgdir${MINGW_PREFIX}/share/info"
  # empty folders
  cd "$pkgdir${MINGW_PREFIX}"
  rmdir -p "${_target}/lib"
  rmdir include
}

# vim:set ts=2 sw=2 et:
